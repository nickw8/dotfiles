autoload -Uz compinit
#if [ "$(date +'%j')" != "$(date -d "$(stat -c %y "${ZDOTDIR:-$HOME}/.zcompdump")" +'%j')" ]; then
#  compinit
#else
#  compinit -C
#fi

# ---- Profiling -----
# zmodload zsh/zprof

# ---- Helper Methods -----
function error() { print -P "%F{red}[ERROR]%f: %F{yellow}$1%f" && return 1 }
function info() { print -P "%F{blue}[INFO]%f: %F{cyan}$1%f" }

# ---- Zinit -----
typeset -gAH ZINIT
ZINIT[HOME_DIR]=$HOME/.local/share/zsh/zinit;  ZPFX=$ZINIT[HOME_DIR]/polaris
ZINIT[BIN_DIR]=$ZINIT[HOME_DIR]/zinit.git; ZINIT[OPTIMIZE_OUT_DISK_ACCESSES]=1
ZINIT[COMPLETIONS_DIR]=$ZINIT[HOME_DIR]/completions; ZINIT[SNIPPETS_DIR]=$ZINIT[HOME_DIR]/snippets
ZINIT[ZCOMPDUMP_PATH]=$ZINIT[HOME_DIR]/zcompdump;    ZINIT[PLUGINS_DIR]=$ZINIT[HOME_DIR]/plugins
ZI_FORK='vladdoster'; ZI_REPO='zdharma-continuum'; GH_RAW_URL='https://raw.githubusercontent.com'

if [ $(date +'%j') != $(/usr/bin/stat -f '%Sm' -t '%j' ${ZINIT[HOME_DIR]:-$HOME}/zcompdump) ]; then
  compinit
else
  compinit -C
fi

if [[ ! -e $ZINIT[BIN_DIR] ]]; then
  info 'downloading zinit' \
  && command mkdir -pv ${ZINIT[HOME_DIR]} \
  && command git clone \
    https://github.com/${ZI_REPO}/zinit.git \
    ${ZINIT[BIN_DIR]} \
  || error 'failed to clone zinit repository' \
  && info 'setting up zinit' \
  && command chmod g-rwX ${ZINIT[HOME_DIR]} \
  && zcompile ${ZINIT[BIN_DIR]}/zinit.zsh \
  && info 'sucessfully installed zinit'
fi

if [[ -e "${ZINIT[BIN_DIR]}/zinit.zsh" ]]; then
  source "${ZINIT[BIN_DIR]}/zinit.zsh" &&
    autoload -Uz _zinit && \
    (( ${+_comps} )) && \
    _comps[zinit]=_zinit
else error "unable to find 'zinit.zsh'" && return 1
fi

# ---- Zinit: Oh-My-Zsh & Prezto Plugins -----
zinit wait lucid for is-snippet \
    OMZL::{'clipboard','compfix','completion','git','grep'}.zsh \
    OMZP::git \
    OMZP::sudo \
    OMZP::aws \
    OMZP::kubectl \
    OMZP::kubectx \
    OMZP::rust \
    OMZP::command-not-found \
    OMZP::eza

# zinit wait lucid as'completion' for \
#     OMZP::'terraform/_terraform'


# ---- Zinit: Completions -----
# local GH_RAW_URL='https://raw.githubusercontent.com'
# install_completion(){ zinit wait lucid for as'completion' nocompile id-as"$1" is-snippet "$GH_RAW_URL/$2"; }
# install_completion 'brew-completion/_brew'     'Homebrew/brew/master/completions/zsh/_brew'
# install_completion 'docker-completion/_docker' 'docker/cli/master/contrib/completion/zsh/_docker'
# install_completion 'eza-completion/_eza'       'eza-community/eza/main/completions/zsh/_eza'
# install_completion 'fd-completion/_fd'         'sharkdp/fd/master/contrib/completion/_fd'

# ---- Zinit: ANNEXES -----
zi lucid light-mode for "$ZI_REPO"/zinit-annex-{'bin-gem-node','binary-symlink','patch-dl','submods'}

# ---- Zinit: GH Binaries -----
zi wait lucid from'gh-r' lbin'!' nocompile for \
  @dandavison/delta      @koalaman/shellcheck \
    atclone"./fzf --zsh > _fzf.zsh" \
    atpull"%atclone" src"_fzf.zsh" \
  @junegunn/fzf \
  nocompletions'!' @sharkdp/fd \
  lbin'!* -> shfmt'      @mvdan/sh \
  lbin'!**/rg' nocompletions @BurntSushi/ripgrep \
  lbin atinit"
    alias ll='eza --all --grid --group-directories-first --color=always --long --git --no-filesize --icons=always --no-time --no-user --no-permissions';
    alias l='eza -blF';
    alias la='eza -gla';
    alias ls='eza --color=always --long --git --no-filesize --icons=always --no-time --no-user --no-permissions'" \
  @eza-community/eza

# ---- Zinit: Programs -----
zi wait lucid light-mode from'gh-r' lbin'!' as'program'  nocompile'!' for \
    atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
    src="zhook.zsh" \
  direnv/direnv \
  tofuutils/tenv \
    id-as'carapace' atclone'carapace _carapace > carapace.zsh' \
    atpull'%atclone' src="carapace.zsh" \
  carapace-sh/carapace-bin

export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense'

# ---- Zinit: Commands -----
zi wait lucid light-mode from"gh-r" lbin"!" as"command" nocompile'!' for \
    atclone"./zoxide init --cmd cd zsh > init.zsh" \
    atpull"%atclone" src"init.zsh" \
  ajeetdsouza/zoxide \
    bpick"atuin-*.tar.gz" mv"atuin*/atuin -> atuin" \
    atclone"./atuin init zsh > init.zsh" \
    atpull"%atclone" src"init.zsh" nocompletions \
  atuinsh/atuin

# ---- Zinit: Prompt -----
# Uncomment below on first run
# zinit ice wait'!' lucid atload'true; _p9k_precmd' nocd
# Uncomment below on subsequent runs
zinit ice wait'!' lucid atload'source ~/.p10k.zsh; _p9k_precmd' nocd
zinit light romkatv/powerlevel10k

# ---- Zinit: zsh-vim-mode cursor configuration -----
# MODE_CURSOR_VICMD="green block";              MODE_CURSOR_VIINS="#20d08a blinking bar"
# MODE_INDICATOR_REPLACE='%F{9}%F{1}REPLACE%f'; MODE_INDICATOR_VISUAL='%F{12}%F{4}VISUAL%f'
# MODE_INDICATOR_VIINS='%F{15}%F{8}INSERT%f';   MODE_INDICATOR_VICMD='%F{10}%F{2}NORMAL%f'
# MODE_INDICATOR_VLINE='%F{12}%F{4}V-LINE%f';   MODE_CURSOR_SEARCH="#ff00ff blinking underline"
# setopt PROMPT_SUBST;  export KEYTIMEOUT=1; export LANG=en_US.UTF-8; export LC_ALL="en_US.UTF-8";
# export LC_COLLATE='C'; export LESS='-RMs'; export PAGER=less;       #export VISUAL=vi
# RPS1='${MODE_INDICATOR_PROMPT} ${vcs_info_msg_0_}'

# ---- Zinit: Misc. -----
zinit wait lucid light-mode for \
  Aloxaf/fzf-tab \
    atload'_zsh_autosuggest_start' \
    atinit"
      ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=50
      bindkey '^_' autosuggest-execute
      bindkey '^ ' autosuggest-accept" \
  zsh-users/zsh-autosuggestions \
    atclone'(){local f;cd -q â†’*;for f (*~*.zwc){zcompile -Uz -- ${f}};}' \
    atload'FAST_HIGHLIGHT[chroma-man]=' atpull'%atclone' \
    compile'.*fast*~*.zwc' nocompletions \
  $ZI_REPO/fast-syntax-highlighting

zinit wait'1' lucid is-snippet for \
    $HOME/.zshrc.d/atuin-history-arrow.zsh \
    $HOME/.zshrc.d/aliases.zsh \
    $HOME/.zshrc.d/functions.zsh \
    $HOME/.zshrc.d/fzf-conf.zsh
    # $HOME/.zshrc.d/zstyle-completions.zsh

zinit for atload'
      zicompinit; zicdreplay
      _zsh_highlight_bind_widgets
      _zsh_autosuggest_bind_widgets' \
    as'null' id-as'zinit/cleanup' lucid nocd wait \
  $ZI_REPO/null

# ----- Bat (better cat) -----
export BAT_THEME="Visual Studio Dark+"

# ---- Lazy load nvm -----
# Check if 'nvm' is a command in $PATH
# apparently you can install the omz plugin with lazy tag
# if [ $command[nvm] ]; then

#   # Placeholder 'nvm' shell function:
#   # will only be executed on the first call to 'nvm'
#   nvm() {

#     # Removes this function. Subsequent calls will execute 'nvm' directly
#     unfunction "$0"

#     export NVM_DIR="$HOME/.nvm"
#     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
#     [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#     $0 "$@"
#   }
# fi

# Check if 'kubectl' is a command in $PATH
# if [ $commands[kubectl] ]; then

#   # Placeholder 'kubectl' shell function:
#   # Will only be executed on the first call to 'kubectl'
#   kubectl() {

#     # Remove this function, subsequent calls will execute 'kubectl' directly
#     unfunction "$0"

#     # Load auto-completion
#     source <(kubectl completion zsh)

#     # Execute 'kubectl' binary
#     $0 "$@"
#   }
# fi

# Convert to zinit for brew
# if [[ "$(uname)" == "Darwin" ]]; then
#     # Add Homebrew's executable directory to the front of the PATH
#     eval "$(/opt/homebrew/bin/brew shellenv)"

#     # Source completions added by applications installed by homebrew
#     PATH=$(brew --prefix)/share/zsh/site-functions:$PATH
# fi
